// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_net_5finfo_2eproto() {
  delete m_network::default_instance_;
  delete m_series::default_instance_;
  delete m_netinfo::default_instance_;
}

void protobuf_AddDesc_net_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  m_network::default_instance_ = new m_network();
  m_series::default_instance_ = new m_series();
  m_netinfo::default_instance_ = new m_netinfo();
  m_network::default_instance_->InitAsDefaultInstance();
  m_series::default_instance_->InitAsDefaultInstance();
  m_netinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_5finfo_2eproto {
  StaticDescriptorInitializer_net_5finfo_2eproto() {
    protobuf_AddDesc_net_5finfo_2eproto();
  }
} static_descriptor_initializer_net_5finfo_2eproto_;


// ===================================================================

bool m_network_m_network_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const m_network_m_network_type m_network::FIRST;
const m_network_m_network_type m_network::WLAN;
const m_network_m_network_type m_network::UMTS;
const m_network_m_network_type m_network::LAST;
const m_network_m_network_type m_network::m_network_type_MIN;
const m_network_m_network_type m_network::m_network_type_MAX;
const int m_network::m_network_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int m_network::kIdFieldNumber;
const int m_network::kNameFieldNumber;
const int m_network::kTypeFieldNumber;
const int m_network::kIsActiveFieldNumber;
const int m_network::kAllSeriesFieldNumber;
#endif  // !_MSC_VER

m_network::m_network()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void m_network::InitAsDefaultInstance() {
}

m_network::m_network(const m_network& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void m_network::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  is_active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

m_network::~m_network() {
  SharedDtor();
}

void m_network::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void m_network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const m_network& m_network::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_5finfo_2eproto();  return *default_instance_;
}

m_network* m_network::default_instance_ = NULL;

m_network* m_network::New() const {
  return new m_network;
}

void m_network::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    is_active_ = false;
  }
  all_series_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool m_network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required .m_network.m_network_type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::m_network_m_network_type_IsValid(value)) {
            set_type(static_cast< ::m_network_m_network_type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_active;
        break;
      }
      
      // required bool is_active = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_all_series;
        break;
      }
      
      // repeated .m_series all_series = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_series:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_series()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_all_series;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void m_network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required .m_network.m_network_type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // required bool is_active = 4;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_active(), output);
  }
  
  // repeated .m_series all_series = 5;
  for (int i = 0; i < this->all_series_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->all_series(i), output);
  }
  
}

int m_network::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .m_network.m_network_type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required bool is_active = 4;
    if (has_is_active()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .m_series all_series = 5;
  total_size += 1 * this->all_series_size();
  for (int i = 0; i < this->all_series_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_series(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void m_network::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const m_network*>(&from));
}

void m_network::MergeFrom(const m_network& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_series_.MergeFrom(from.all_series_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
}

void m_network::CopyFrom(const m_network& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool m_network::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < all_series_size(); i++) {
    if (!this->all_series(i).IsInitialized()) return false;
  }
  return true;
}

void m_network::Swap(m_network* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(is_active_, other->is_active_);
    all_series_.Swap(&other->all_series_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string m_network::GetTypeName() const {
  return "m_network";
}


// ===================================================================

#ifndef _MSC_VER
const int m_series::kParameterFieldNumber;
const int m_series::kSizeFieldNumber;
const int m_series::kLastValueFieldNumber;
const int m_series::kOldMFieldNumber;
const int m_series::kOldSFieldNumber;
const int m_series::kNewMFieldNumber;
const int m_series::kNewSFieldNumber;
#endif  // !_MSC_VER

m_series::m_series()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void m_series::InitAsDefaultInstance() {
}

m_series::m_series(const m_series& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void m_series::SharedCtor() {
  _cached_size_ = 0;
  parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  last_value_ = 0;
  old_m_ = 0;
  old_s_ = 0;
  new_m_ = 0;
  new_s_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

m_series::~m_series() {
  SharedDtor();
}

void m_series::SharedDtor() {
  if (parameter_ != &::google::protobuf::internal::kEmptyString) {
    delete parameter_;
  }
  if (this != default_instance_) {
  }
}

void m_series::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const m_series& m_series::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_5finfo_2eproto();  return *default_instance_;
}

m_series* m_series::default_instance_ = NULL;

m_series* m_series::New() const {
  return new m_series;
}

void m_series::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parameter()) {
      if (parameter_ != &::google::protobuf::internal::kEmptyString) {
        parameter_->clear();
      }
    }
    size_ = 0;
    last_value_ = 0;
    old_m_ = 0;
    old_s_ = 0;
    new_m_ = 0;
    new_s_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool m_series::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string parameter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // required int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_value;
        break;
      }
      
      // required double last_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_value_)));
          set_has_last_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_old_m;
        break;
      }
      
      // required double old_m = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_old_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &old_m_)));
          set_has_old_m();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_old_s;
        break;
      }
      
      // required double old_s = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_old_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &old_s_)));
          set_has_old_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_new_m;
        break;
      }
      
      // required double new_m = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_new_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &new_m_)));
          set_has_new_m();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_new_s;
        break;
      }
      
      // required double new_s = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_new_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &new_s_)));
          set_has_new_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void m_series::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string parameter = 1;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parameter(), output);
  }
  
  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }
  
  // required double last_value = 3;
  if (has_last_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_value(), output);
  }
  
  // required double old_m = 4;
  if (has_old_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->old_m(), output);
  }
  
  // required double old_s = 5;
  if (has_old_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->old_s(), output);
  }
  
  // required double new_m = 6;
  if (has_new_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->new_m(), output);
  }
  
  // required double new_s = 7;
  if (has_new_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->new_s(), output);
  }
  
}

int m_series::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string parameter = 1;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameter());
    }
    
    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
    // required double last_value = 3;
    if (has_last_value()) {
      total_size += 1 + 8;
    }
    
    // required double old_m = 4;
    if (has_old_m()) {
      total_size += 1 + 8;
    }
    
    // required double old_s = 5;
    if (has_old_s()) {
      total_size += 1 + 8;
    }
    
    // required double new_m = 6;
    if (has_new_m()) {
      total_size += 1 + 8;
    }
    
    // required double new_s = 7;
    if (has_new_s()) {
      total_size += 1 + 8;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void m_series::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const m_series*>(&from));
}

void m_series::MergeFrom(const m_series& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_last_value()) {
      set_last_value(from.last_value());
    }
    if (from.has_old_m()) {
      set_old_m(from.old_m());
    }
    if (from.has_old_s()) {
      set_old_s(from.old_s());
    }
    if (from.has_new_m()) {
      set_new_m(from.new_m());
    }
    if (from.has_new_s()) {
      set_new_s(from.new_s());
    }
  }
}

void m_series::CopyFrom(const m_series& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool m_series::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void m_series::Swap(m_series* other) {
  if (other != this) {
    std::swap(parameter_, other->parameter_);
    std::swap(size_, other->size_);
    std::swap(last_value_, other->last_value_);
    std::swap(old_m_, other->old_m_);
    std::swap(old_s_, other->old_s_);
    std::swap(new_m_, other->new_m_);
    std::swap(new_s_, other->new_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string m_series::GetTypeName() const {
  return "m_series";
}


// ===================================================================

#ifndef _MSC_VER
const int m_netinfo::kAllNetworksFieldNumber;
#endif  // !_MSC_VER

m_netinfo::m_netinfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void m_netinfo::InitAsDefaultInstance() {
}

m_netinfo::m_netinfo(const m_netinfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void m_netinfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

m_netinfo::~m_netinfo() {
  SharedDtor();
}

void m_netinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void m_netinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const m_netinfo& m_netinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_5finfo_2eproto();  return *default_instance_;
}

m_netinfo* m_netinfo::default_instance_ = NULL;

m_netinfo* m_netinfo::New() const {
  return new m_netinfo;
}

void m_netinfo::Clear() {
  all_networks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool m_netinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .m_network all_networks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_networks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_networks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_all_networks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void m_netinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .m_network all_networks = 1;
  for (int i = 0; i < this->all_networks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->all_networks(i), output);
  }
  
}

int m_netinfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .m_network all_networks = 1;
  total_size += 1 * this->all_networks_size();
  for (int i = 0; i < this->all_networks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_networks(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void m_netinfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const m_netinfo*>(&from));
}

void m_netinfo::MergeFrom(const m_netinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_networks_.MergeFrom(from.all_networks_);
}

void m_netinfo::CopyFrom(const m_netinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool m_netinfo::IsInitialized() const {
  
  for (int i = 0; i < all_networks_size(); i++) {
    if (!this->all_networks(i).IsInitialized()) return false;
  }
  return true;
}

void m_netinfo::Swap(m_netinfo* other) {
  if (other != this) {
    all_networks_.Swap(&other->all_networks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string m_netinfo::GetTypeName() const {
  return "m_netinfo";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
