// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_info.proto

#ifndef PROTOBUF_net_5finfo_2eproto__INCLUDED
#define PROTOBUF_net_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_5finfo_2eproto();
void protobuf_AssignDesc_net_5finfo_2eproto();
void protobuf_ShutdownFile_net_5finfo_2eproto();

class m_network;
class m_series;
class m_netinfo;

enum m_network_m_network_type {
  m_network_m_network_type_FIRST = 0,
  m_network_m_network_type_WLAN = 0,
  m_network_m_network_type_UMTS = 1,
  m_network_m_network_type_LAST = 2
};
bool m_network_m_network_type_IsValid(int value);
const m_network_m_network_type m_network_m_network_type_m_network_type_MIN = m_network_m_network_type_FIRST;
const m_network_m_network_type m_network_m_network_type_m_network_type_MAX = m_network_m_network_type_LAST;
const int m_network_m_network_type_m_network_type_ARRAYSIZE = m_network_m_network_type_m_network_type_MAX + 1;

// ===================================================================

class m_network : public ::google::protobuf::MessageLite {
 public:
  m_network();
  virtual ~m_network();
  
  m_network(const m_network& from);
  
  inline m_network& operator=(const m_network& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const m_network& default_instance();
  
  void Swap(m_network* other);
  
  // implements Message ----------------------------------------------
  
  m_network* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const m_network& from);
  void MergeFrom(const m_network& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef m_network_m_network_type m_network_type;
  static const m_network_type FIRST = m_network_m_network_type_FIRST;
  static const m_network_type WLAN = m_network_m_network_type_WLAN;
  static const m_network_type UMTS = m_network_m_network_type_UMTS;
  static const m_network_type LAST = m_network_m_network_type_LAST;
  static inline bool m_network_type_IsValid(int value) {
    return m_network_m_network_type_IsValid(value);
  }
  static const m_network_type m_network_type_MIN =
    m_network_m_network_type_m_network_type_MIN;
  static const m_network_type m_network_type_MAX =
    m_network_m_network_type_m_network_type_MAX;
  static const int m_network_type_ARRAYSIZE =
    m_network_m_network_type_m_network_type_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .m_network.m_network_type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::m_network_m_network_type type() const;
  inline void set_type(::m_network_m_network_type value);
  
  // required bool is_active = 4;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 4;
  inline bool is_active() const;
  inline void set_is_active(bool value);
  
  // repeated .m_series all_series = 5;
  inline int all_series_size() const;
  inline void clear_all_series();
  static const int kAllSeriesFieldNumber = 5;
  inline const ::m_series& all_series(int index) const;
  inline ::m_series* mutable_all_series(int index);
  inline ::m_series* add_all_series();
  inline const ::google::protobuf::RepeatedPtrField< ::m_series >&
      all_series() const;
  inline ::google::protobuf::RepeatedPtrField< ::m_series >*
      mutable_all_series();
  
  // @@protoc_insertion_point(class_scope:m_network)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_active();
  inline void clear_has_is_active();
  
  ::std::string* id_;
  ::std::string* name_;
  int type_;
  bool is_active_;
  ::google::protobuf::RepeatedPtrField< ::m_series > all_series_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_5finfo_2eproto();
  friend void protobuf_AssignDesc_net_5finfo_2eproto();
  friend void protobuf_ShutdownFile_net_5finfo_2eproto();
  
  void InitAsDefaultInstance();
  static m_network* default_instance_;
};
// -------------------------------------------------------------------

class m_series : public ::google::protobuf::MessageLite {
 public:
  m_series();
  virtual ~m_series();
  
  m_series(const m_series& from);
  
  inline m_series& operator=(const m_series& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const m_series& default_instance();
  
  void Swap(m_series* other);
  
  // implements Message ----------------------------------------------
  
  m_series* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const m_series& from);
  void MergeFrom(const m_series& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string parameter = 1;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 1;
  inline const ::std::string& parameter() const;
  inline void set_parameter(const ::std::string& value);
  inline void set_parameter(const char* value);
  inline void set_parameter(const char* value, size_t size);
  inline ::std::string* mutable_parameter();
  inline ::std::string* release_parameter();
  
  // required int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);
  
  // required double last_value = 3;
  inline bool has_last_value() const;
  inline void clear_last_value();
  static const int kLastValueFieldNumber = 3;
  inline double last_value() const;
  inline void set_last_value(double value);
  
  // required double old_m = 4;
  inline bool has_old_m() const;
  inline void clear_old_m();
  static const int kOldMFieldNumber = 4;
  inline double old_m() const;
  inline void set_old_m(double value);
  
  // required double old_s = 5;
  inline bool has_old_s() const;
  inline void clear_old_s();
  static const int kOldSFieldNumber = 5;
  inline double old_s() const;
  inline void set_old_s(double value);
  
  // required double new_m = 6;
  inline bool has_new_m() const;
  inline void clear_new_m();
  static const int kNewMFieldNumber = 6;
  inline double new_m() const;
  inline void set_new_m(double value);
  
  // required double new_s = 7;
  inline bool has_new_s() const;
  inline void clear_new_s();
  static const int kNewSFieldNumber = 7;
  inline double new_s() const;
  inline void set_new_s(double value);
  
  // @@protoc_insertion_point(class_scope:m_series)
 private:
  inline void set_has_parameter();
  inline void clear_has_parameter();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_last_value();
  inline void clear_has_last_value();
  inline void set_has_old_m();
  inline void clear_has_old_m();
  inline void set_has_old_s();
  inline void clear_has_old_s();
  inline void set_has_new_m();
  inline void clear_has_new_m();
  inline void set_has_new_s();
  inline void clear_has_new_s();
  
  ::std::string* parameter_;
  double last_value_;
  double old_m_;
  double old_s_;
  double new_m_;
  double new_s_;
  ::google::protobuf::int32 size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_5finfo_2eproto();
  friend void protobuf_AssignDesc_net_5finfo_2eproto();
  friend void protobuf_ShutdownFile_net_5finfo_2eproto();
  
  void InitAsDefaultInstance();
  static m_series* default_instance_;
};
// -------------------------------------------------------------------

class m_netinfo : public ::google::protobuf::MessageLite {
 public:
  m_netinfo();
  virtual ~m_netinfo();
  
  m_netinfo(const m_netinfo& from);
  
  inline m_netinfo& operator=(const m_netinfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const m_netinfo& default_instance();
  
  void Swap(m_netinfo* other);
  
  // implements Message ----------------------------------------------
  
  m_netinfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const m_netinfo& from);
  void MergeFrom(const m_netinfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .m_network all_networks = 1;
  inline int all_networks_size() const;
  inline void clear_all_networks();
  static const int kAllNetworksFieldNumber = 1;
  inline const ::m_network& all_networks(int index) const;
  inline ::m_network* mutable_all_networks(int index);
  inline ::m_network* add_all_networks();
  inline const ::google::protobuf::RepeatedPtrField< ::m_network >&
      all_networks() const;
  inline ::google::protobuf::RepeatedPtrField< ::m_network >*
      mutable_all_networks();
  
  // @@protoc_insertion_point(class_scope:m_netinfo)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::m_network > all_networks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_net_5finfo_2eproto();
  friend void protobuf_AssignDesc_net_5finfo_2eproto();
  friend void protobuf_ShutdownFile_net_5finfo_2eproto();
  
  void InitAsDefaultInstance();
  static m_netinfo* default_instance_;
};
// ===================================================================


// ===================================================================

// m_network

// required string id = 1;
inline bool m_network::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void m_network::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void m_network::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void m_network::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& m_network::id() const {
  return *id_;
}
inline void m_network::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void m_network::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void m_network::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* m_network::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* m_network::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string name = 2;
inline bool m_network::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void m_network::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void m_network::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void m_network::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& m_network::name() const {
  return *name_;
}
inline void m_network::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void m_network::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void m_network::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* m_network::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* m_network::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .m_network.m_network_type type = 3;
inline bool m_network::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void m_network::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void m_network::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void m_network::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::m_network_m_network_type m_network::type() const {
  return static_cast< ::m_network_m_network_type >(type_);
}
inline void m_network::set_type(::m_network_m_network_type value) {
  GOOGLE_DCHECK(::m_network_m_network_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bool is_active = 4;
inline bool m_network::has_is_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void m_network::set_has_is_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void m_network::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void m_network::clear_is_active() {
  is_active_ = false;
  clear_has_is_active();
}
inline bool m_network::is_active() const {
  return is_active_;
}
inline void m_network::set_is_active(bool value) {
  set_has_is_active();
  is_active_ = value;
}

// repeated .m_series all_series = 5;
inline int m_network::all_series_size() const {
  return all_series_.size();
}
inline void m_network::clear_all_series() {
  all_series_.Clear();
}
inline const ::m_series& m_network::all_series(int index) const {
  return all_series_.Get(index);
}
inline ::m_series* m_network::mutable_all_series(int index) {
  return all_series_.Mutable(index);
}
inline ::m_series* m_network::add_all_series() {
  return all_series_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::m_series >&
m_network::all_series() const {
  return all_series_;
}
inline ::google::protobuf::RepeatedPtrField< ::m_series >*
m_network::mutable_all_series() {
  return &all_series_;
}

// -------------------------------------------------------------------

// m_series

// required string parameter = 1;
inline bool m_series::has_parameter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void m_series::set_has_parameter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void m_series::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void m_series::clear_parameter() {
  if (parameter_ != &::google::protobuf::internal::kEmptyString) {
    parameter_->clear();
  }
  clear_has_parameter();
}
inline const ::std::string& m_series::parameter() const {
  return *parameter_;
}
inline void m_series::set_parameter(const ::std::string& value) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(value);
}
inline void m_series::set_parameter(const char* value) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(value);
}
inline void m_series::set_parameter(const char* value, size_t size) {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  parameter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* m_series::mutable_parameter() {
  set_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    parameter_ = new ::std::string;
  }
  return parameter_;
}
inline ::std::string* m_series::release_parameter() {
  clear_has_parameter();
  if (parameter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parameter_;
    parameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 size = 2;
inline bool m_series::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void m_series::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void m_series::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void m_series::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 m_series::size() const {
  return size_;
}
inline void m_series::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required double last_value = 3;
inline bool m_series::has_last_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void m_series::set_has_last_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void m_series::clear_has_last_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void m_series::clear_last_value() {
  last_value_ = 0;
  clear_has_last_value();
}
inline double m_series::last_value() const {
  return last_value_;
}
inline void m_series::set_last_value(double value) {
  set_has_last_value();
  last_value_ = value;
}

// required double old_m = 4;
inline bool m_series::has_old_m() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void m_series::set_has_old_m() {
  _has_bits_[0] |= 0x00000008u;
}
inline void m_series::clear_has_old_m() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void m_series::clear_old_m() {
  old_m_ = 0;
  clear_has_old_m();
}
inline double m_series::old_m() const {
  return old_m_;
}
inline void m_series::set_old_m(double value) {
  set_has_old_m();
  old_m_ = value;
}

// required double old_s = 5;
inline bool m_series::has_old_s() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void m_series::set_has_old_s() {
  _has_bits_[0] |= 0x00000010u;
}
inline void m_series::clear_has_old_s() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void m_series::clear_old_s() {
  old_s_ = 0;
  clear_has_old_s();
}
inline double m_series::old_s() const {
  return old_s_;
}
inline void m_series::set_old_s(double value) {
  set_has_old_s();
  old_s_ = value;
}

// required double new_m = 6;
inline bool m_series::has_new_m() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void m_series::set_has_new_m() {
  _has_bits_[0] |= 0x00000020u;
}
inline void m_series::clear_has_new_m() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void m_series::clear_new_m() {
  new_m_ = 0;
  clear_has_new_m();
}
inline double m_series::new_m() const {
  return new_m_;
}
inline void m_series::set_new_m(double value) {
  set_has_new_m();
  new_m_ = value;
}

// required double new_s = 7;
inline bool m_series::has_new_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void m_series::set_has_new_s() {
  _has_bits_[0] |= 0x00000040u;
}
inline void m_series::clear_has_new_s() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void m_series::clear_new_s() {
  new_s_ = 0;
  clear_has_new_s();
}
inline double m_series::new_s() const {
  return new_s_;
}
inline void m_series::set_new_s(double value) {
  set_has_new_s();
  new_s_ = value;
}

// -------------------------------------------------------------------

// m_netinfo

// repeated .m_network all_networks = 1;
inline int m_netinfo::all_networks_size() const {
  return all_networks_.size();
}
inline void m_netinfo::clear_all_networks() {
  all_networks_.Clear();
}
inline const ::m_network& m_netinfo::all_networks(int index) const {
  return all_networks_.Get(index);
}
inline ::m_network* m_netinfo::mutable_all_networks(int index) {
  return all_networks_.Mutable(index);
}
inline ::m_network* m_netinfo::add_all_networks() {
  return all_networks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::m_network >&
m_netinfo::all_networks() const {
  return all_networks_;
}
inline ::google::protobuf::RepeatedPtrField< ::m_network >*
m_netinfo::mutable_all_networks() {
  return &all_networks_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_5finfo_2eproto__INCLUDED
